{
    "controllers": {
      "searchController.js": "const searchModel = require('../models/searchModel');\n\nmodule.exports = {\n  async searchDatasets(req, res) {\n    try {\n      const { keywords, filters } = req.query;\n      const results = await searchModel.search(keywords, filters);\n      res.render('searchView', { results });\n    } catch (error) {\n      res.status(500).send('Server error');\n    }\n  }\n};",
      "paymentController.js": "const paymentModel = require('../models/paymentModel');\n\nmodule.exports = {\n  async processPayment(req, res) {\n    try {\n      const paymentDetails = req.body;\n      const result = await paymentModel.process(paymentDetails);\n      res.render('paymentView', { result });\n    } catch (error) {\n      res.status(500).send('Payment processing error');\n    }\n  }\n};",
      "datasetController.js": "const datasetModel = require('../models/datasetModel');\n\nmodule.exports = {\n  async getDatasets(req, res) {\n    try {\n      const datasets = await datasetModel.getAll();\n      res.render('datasetView', { datasets });\n    } catch (error) {\n      res.status(500).send('Error fetching datasets');\n    }\n  }\n};",
      "annotationController.js": "const annotationModel = require('../models/annotationModel');\n\nmodule.exports = {\n  async requestAnnotation(req, res) {\n    try {\n      const { dataRequirements } = req.body;\n      const quote = await annotationModel.getQuote(dataRequirements);\n      res.render('annotationView', { quote });\n    } catch (error) {\n      res.status(500).send('Error with annotation request');\n    }\n  }\n};",
      "rawDataController.js": "const rawDataModel = require('../models/rawDataModel');\n\nmodule.exports = {\n  async getRawDatasets(req, res) {\n    try {\n      const rawDatasets = await rawDataModel.getAll();\n      res.render('rawDataView', { rawDatasets });\n    } catch (error) {\n      res.status(500).send('Error fetching raw datasets');\n    }\n  }\n};",
      "securityController.js": "const securityModel = require('../models/securityModel');\n\nmodule.exports = {\n  async viewSecurity(req, res) {\n    try {\n      const securityDetails = await securityModel.getAll();\n      res.render('securityView', { securityDetails });\n    } catch (error) {\n      res.status(500).send('Error fetching security details');\n    }\n  }\n};",
      "complianceController.js": "const complianceModel = require('../models/complianceModel');\n\nmodule.exports = {\n  async verifyCompliance(req, res) {\n    try {\n      const { datasetId } = req.query;\n      const complianceStatus = await complianceModel.verify(datasetId);\n      res.render('complianceView', { complianceStatus });\n    } catch (error) {\n      res.status(500).send('Error verifying compliance');\n    }\n  }\n};"
    },
    "models": {
      "searchModel.js": "const db = require('../database/dbConfig');\n\nmodule.exports = {\n  async search(keywords, filters) {\n    try {\n      const query = 'SELECT * FROM datasets WHERE keywords LIKE ? AND filters LIKE ?';\n      const results = await db.query(query, [keywords, filters]);\n      return results;\n    } catch (error) {\n      throw error;\n    }\n  }\n};",
      "paymentModel.js": "const db = require('../database/dbConfig');\n\nmodule.exports = {\n  async process(paymentDetails) {\n    try {\n      const query = 'INSERT INTO payments SET ?';\n      const result = await db.query(query, paymentDetails);\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n};",
      "datasetModel.js": "const db = require('../database/dbConfig');\n\nmodule.exports = {\n  async getAll() {\n    try {\n      const query = 'SELECT * FROM datasets';\n      const datasets = await db.query(query);\n      return datasets;\n    } catch (error) {\n      throw error;\n    }\n  }\n};",
      "annotationModel.js": "const db = require('../database/dbConfig');\n\nmodule.exports = {\n  async getQuote(dataRequirements) {\n    try {\n      const query = 'SELECT * FROM annotations WHERE requirements LIKE ?';\n      const quote = await db.query(query, [dataRequirements]);\n      return quote;\n    } catch (error) {\n      throw error;\n    }\n  }\n};",
      "rawDataModel.js": "const db = require('../database/dbConfig');\n\nmodule.exports = {\n  async getAll() {\n    try {\n      const query = 'SELECT * FROM raw_datasets';\n      const rawDatasets = await db.query(query);\n      return rawDatasets;\n    } catch (error) {\n      throw error;\n    }\n  }\n};",
      "securityModel.js": "const db = require('../database/dbConfig');\n\nmodule.exports = {\n  async getAll() {\n    try {\n      const query = 'SELECT * FROM security_details';\n      const securityDetails = await db.query(query);\n      return securityDetails;\n    } catch (error) {\n      throw error;\n    }\n  }\n};",
      "complianceModel.js": "const db = require('../database/dbConfig');\n\nmodule.exports = {\n  async verify(datasetId) {\n    try {\n      const query = 'SELECT * FROM compliance WHERE dataset_id = ?';\n      const complianceStatus = await db.query(query, [datasetId]);\n      return complianceStatus;\n    } catch (error) {\n      throw error;\n    }\n  }\n};"
    },
    "views": {
      "searchView.ejs": "<%- include('partials/header') %>\n<h2>Search Results</h2>\n<ul>\n  <% results.forEach(result => { %>\n    <li><%= result.name %> - <%= result.description %></li>\n  <% }) %>\n</ul>\n<%- include('partials/footer') %>",
      "paymentView.ejs": "<%- include('partials/header') %>\n<h2>Payment Status</h2>\n<p>Payment <%= result.status %> for transaction ID: <%= result.transactionId %></p>\n<%- include('partials/footer') %>",
      "datasetView.ejs": "<%- include('partials/header') %>\n<h2>Available Datasets</h2>\n<ul>\n  <% datasets.forEach(dataset => { %>\n    <li><%= dataset.name %> - <%= dataset.description %></li>\n  <% }) %>\n</ul>\n<%- include('partials/footer') %>",
      "annotationView.ejs": "<%- include('partials/header') %>\n<h2>Annotation Quote</h2>\n<p>Estimated cost: <%= quote.cost %></p>\n<%- include('partials/footer') %>",
      "rawDataView.ejs": "<%- include('partials/header') %>\n<h2>Raw Datasets</h2>\n<ul>\n  <% rawDatasets.forEach(dataset => { %>\n    <li><%= dataset.name %> - <%= dataset.description %></li>\n  <% }) %>\n</ul>\n<%- include('partials/footer') %>",
      "securityView.ejs": "<%- include('partials/header') %>\n<h2>Security Information</h2>\n<p><%= securityDetails.info %></p>\n<%- include('partials/footer') %>",
      "complianceView.ejs": "<%- include('partials/header') %>\n<h2>Compliance Status</h2>\n<p>Compliance: <%= complianceStatus.status %></p>\n<%- include('partials/footer') %>"
    },
    "database": {
      "dbConfig.js": "const sqlite3 = require('sqlite3').verbose();\n\nlet db = new sqlite3.Database('./database/data.db', (err) => {\n  if (err) {\n    console.error('Error opening database: ' + err.message);\n  } else {\n    console.log('Connected to SQLite database.');\n  }\n});\n\nmodule.exports = db;",
      "migrations": {
        "initialMigration.js": "const db = require('../dbConfig');\n\ndb.serialize(() => {\n  db.run(`CREATE TABLE IF NOT EXISTS datasets (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    keywords TEXT,\n    filters TEXT\n  )`);\n\n  db.run(`CREATE TABLE IF NOT EXISTS payments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    transactionId TEXT,\n    status TEXT\n  )`);\n});\n\ndb.close();"
      }
    },
    "public": {
      "css": {
        "styles.css": "body { font-family: Arial, sans-serif; }\nh2 { color: #333; }\nli { margin-bottom: 10px; }"
      },
      "js": {
        "app.js": "console.log('App is running');"
      }
    },
    "routes": {
      "searchRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst searchController = require('../controllers/searchController');\n\nrouter.get('/search', searchController.searchDatasets);\n\nmodule.exports = router;",
      "paymentRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst paymentController = require('../controllers/paymentController');\n\nrouter.post('/payment', paymentController.processPayment);\n\nmodule.exports = router;",
      "datasetRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst datasetController = require('../controllers/datasetController');\n\nrouter.get('/datasets', datasetController.getDatasets);\n\nmodule.exports = router;",
      "annotationRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst annotationController = require('../controllers/annotationController');\n\nrouter.post('/annotation', annotationController.requestAnnotation);\n\nmodule.exports = router;",
      "rawDataRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst rawDataController = require('../controllers/rawDataController');\n\nrouter.get('/raw-datasets', rawDataController.getRawDatasets);\n\nmodule.exports = router;",
      "securityRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst securityController = require('../controllers/securityController');\n\nrouter.get('/security', securityController.viewSecurity);\n\nmodule.exports = router;",
      "complianceRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst complianceController = require('../controllers/complianceController');\n\nrouter.get('/compliance', complianceController.verifyCompliance);\n\nmodule.exports = router;"
    },
    "root_files": {
      "app.js": "const express = require('express');\nconst app = express();\nconst searchRoutes = require('./routes/searchRoutes');\nconst paymentRoutes = require('./routes/paymentRoutes');\nconst datasetRoutes = require('./routes/datasetRoutes');\nconst annotationRoutes = require('./routes/annotationRoutes');\nconst rawDataRoutes = require('./routes/rawDataRoutes');\nconst securityRoutes = require('./routes/securityRoutes');\nconst complianceRoutes = require('./routes/complianceRoutes');\n\napp.set('view engine', 'ejs');\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(express.static('public'));\n\napp.use('/', searchRoutes);\napp.use('/', paymentRoutes);\napp.use('/', datasetRoutes);\napp.use('/', annotationRoutes);\napp.use('/', rawDataRoutes);\napp.use('/', securityRoutes);\napp.use('/', complianceRoutes);\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});",
      "package.json": "{\n  \"name\": \"ai-data-shop\",\n  \"version\": \"1.0.0\",\n  \"description\": \"E-commerce platform for curated datasets\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"start\": \"node app.js\",\n    \"migrate\": \"node database/migrations/initialMigration.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\",\n    \"ejs\": \"^3.1.6\",\n    \"sqlite3\": \"^5.0.0\"\n  }\n}"
    }
  }
  